# This file is a template, and might need editing before it works on your project.
# This template uses the java:8 docker image because there isn't any
# official Gradle image at this moment
#
# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle
image: java:8

services:
  - postgres:latest
# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
    GRADLE_OPTS: "-Dorg.gradle.daemon=false"
    POSTGRES_DB: d3lnmvrhmjvkdp
    POSTGRES_USER: hhyvoymxpocpcg
    POSTGRES_PASSWORD: bd3230fb212540a71b1ec31587bf202a346411e67db28c6c32a0b4b9253c0750

# Make the gradle wrapper executable. This essentially downloads a copy of
# Gradle to build the project with.
# https://docs.gradle.org/current/userguide/gradle_wrapper.html
# It is expected that any modern gradle project has a wrapper
before_script:
    - chmod +x gradlew

cache:
    - /chache/.gradle

# We redirect the gradle user home using -g so that it caches the
# wrapper and dependencies.
# https://docs.gradle.org/current/userguide/gradle_command_line.html
#
# Unfortunately it also caches the build output so
# cleaning removes reminants of any cached builds.
# The assemble task actually builds the project.
# If it fails here, the tests can't run.
build:
  stage: build
  script:
    - ./gradlew -g /cache/.gradle clean assemble
  allow_failure: false

# Use the generated build output to run the tests.
test:
  stage: test
  environment:
    name: testing
  script:
    - ./gradlew -g /cache/.gradle check --info
    - chmod +x codecov
    - ./codecov
  allow_failure: false

deploy-to-heroku:
  image: ruby:2.4
  stage: deploy
  environment:
    name: herokudeployment
  script:
    - chmod +x herokudeployer
    - ./herokudeployer
  only:
    - master